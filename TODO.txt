 - create benchmark suite; see e.g.
    http://mazonka.com/brainf/
    + welcome.bf
    + my solution for GCJ
    + my solution for FBHC
    also check esolangs wiki

 - create test cases that cover all the possible optimizations and code
   generation scenario's.

 - clean up TODO/FIXMEs in the code

 - call into debugger on all errors (e.g. on allocation failure/memory limit
   exceeded) if possible

 - MAYBE: separate code generation into:
    symbolic code generation (easy)
    peephole optimization (only if optimizations are enabled)
    bytecode generation (how to do this in a single pass?)

Debugger:
 - functions to display/manipulate the current code position.
 - function to write to memory at an absolute address.
   (interpret '+x'/'-x' as head-relative offsets, and 'x' as absolute?)
 - extend writing functions to allow a range of memory to be filled
   (add an extra parameter that specifies an end position, or a length?)

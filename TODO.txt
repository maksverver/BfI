 - DEBUG: valgrind --leak-check=full ./bfi ../brainfuck/programs/hello.bf
    This reports memory leaks (even just with -t/-p).

 - create benchmark suite; see e.g.
    http://mazonka.com/brainf/
    + welcome.bf
    + my solution for GCJ
    + my solution for FBHC
    also check esolangs wiki

 - create test cases that cover all the possible optimizations and code
   generation scenario's.

 - clean up TODO/FIXMEs in the code

 - call into debugger on all errors (e.g. on allocation failure/memory limit
   exceeded) if possible

 - MAYBE: separate code generation into:
    symbolic code generation (easy)
    peephole optimization (only if optimizations are enabled)
    bytecode generation (how to do this in a single pass?)

Optimization/code generation:
 - Idea: instead of always updating the register storing the tape head, keep
         track of offset, and only update at the end of a while loop (unless
         the while loop is perfectly balanced).

   For example, code like this:

     >>>[>+>[>]<<]

   Currently translates to:

     add 3 to head
     while *head:
       add 1 to head
       add 1 to *head
       add 1 to head
       while *head:
         add 1 to head
       subtract 2 from head

   But it could equivalently translate to:

     while head[3]:
       add 1 to head[4]
         while head[5]:
           add 1 to head

   This eliminates updating of `head' (except once per iteration of each loop)
   but it makes memory references more complex (requiring an offset) so it is
   unclear whether this is actually much faster.  Should benchmark!

Debugger:
 - functions to display/manipulate the current code position.
 - function to write to memory at an absolute address.
   (interpret '+x'/'-x' as head-relative offsets, and 'x' as absolute?)
 - extend writing functions to allow a range of memory to be filled
   (add an extra parameter that specifies an end position, or a length?)
